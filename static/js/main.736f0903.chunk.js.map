{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/About.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","About","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","path","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","users","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","Root","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.736f0903.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      { \n        robots.map((user, i) => {\n          return (\n            <Card \n              key={i} \n              id={robots[i].id} \n              name={robots[i].name} \n              email={robots[i].email}\n              />\n          )\n        })\n       }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={ searchChange }\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return  (\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '80vh'}}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({\n      hasError: true\n    })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooops. That is not good</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundry;","import React from 'react';\n\nconst About = () => {\n  return  (\n    <h1>About</h1>\n  )\n}\n\nexport default About;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\n\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport About from '../components/About';\nimport {\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport './App.css';\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { robots, searchField, onSearchChange, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return (\n      <div className='tc'>\n        <h1 className='f1'>RoboFriends</h1>\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/\">\n          <SearchBox searchChange={onSearchChange}/>\n            <Scroll>\n              { isPending ? <h1>Loading</h1> :\n                <ErrorBoundry>\n                  <CardList robots={filteredRobots} />\n                </ErrorBoundry>\n              }\n            </Scroll>\n          </Route>\n        </Switch>\n        \n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants'\n\n\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCH_FIELD, payload: text })\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({type: REQUEST_ROBOTS_PENDING});\n  fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n      .then(users => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: users}))\n      .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload:error}));\n} ","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, {searchField: action.payload})\n    default:\n      return state\n  }\n}\n\nconst initialStateRobots = {\n  robots: [],\n  isPending: true,\n  error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {isPending: true})\n      // return {\n      //   ...state, isPending:true\n      // }\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {error: action.payload})\n    default:\n      return state\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport './index.css';\nimport App from './containers/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({requestRobots, searchRobots})\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nconst Root = ({ store }) => (\n  <Provider store={store}>\n    <Router>\n      <Route path=\"/\" component={App} />\n    </Router>\n  </Provider>\n)\n\nReactDOM.render(\n  <Root store={store} />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}